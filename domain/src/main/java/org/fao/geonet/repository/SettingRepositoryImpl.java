package org.fao.geonet.repository;

import static org.fao.geonet.repository.SettingRepository.*;

import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.StringTokenizer;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;

import org.fao.geonet.domain.Setting;
import org.fao.geonet.domain.SettingNamedQueries;

/**
 * Implementation for all queries that cannot be automatically generated by Spring-data.
 *
 * @author Jesse
 */
public class SettingRepositoryImpl implements SettingRepositoryCustom {

    @PersistenceContext
    private EntityManager entityManager;

    @Override
    public List<Setting> findByPath(String pathToSetting) {
        StringTokenizer stringTokenizer = new StringTokenizer(pathToSetting, SEPARATOR);

        int countTokens = stringTokenizer.countTokens();
        List<String> pathSegments = new ArrayList<String>(countTokens);
        while (stringTokenizer.hasMoreTokens()) {
            String child = stringTokenizer.nextToken();

            if (child.startsWith(ID_PREFIX)) {
                pathSegments.clear();
                pathSegments.add(child);
            } else {
                pathSegments.add(child);
            }
        }

        List<Setting> currentSettings = null;
        String firstSegment = pathSegments.get(0);
        if (firstSegment.startsWith(ID_PREFIX)) {
            int id = Integer.parseInt(firstSegment.substring(ID_PREFIX.length()));
            Setting setting = entityManager.find(Setting.class, id);
            if (setting == null) {
                currentSettings = Collections.emptyList();
                pathSegments=Collections.emptyList();
            } else {
                currentSettings = Collections.singletonList(setting);
                pathSegments = pathSegments.subList(1, pathSegments.size());
            }
        } else {
            TypedQuery<Setting> root = entityManager.createNamedQuery(SettingNamedQueries.QUERY_FIND_ROOT.NAME, Setting.class);
            currentSettings = root.getResultList();
        }
        for (String childName : pathSegments) {
            List<Setting> oldSettings = currentSettings;
            currentSettings = new LinkedList<Setting>();
            for (Setting setting : oldSettings) {
                TypedQuery<Setting> query = entityManager.createNamedQuery(SettingNamedQueries.QUERY_FIND_CHILDREN_BY_NAME.NAME, Setting.class);
                query.setParameter("parentid", setting.getId());
                query.setParameter("name", childName);

                List<Setting> children = query.getResultList();
                currentSettings.addAll(children);
            }
        }
        return currentSettings;
    }

    @Override
    public Setting findOneByPath(String pathToSetting) {
        List<Setting> settings = findByPath(pathToSetting);
        if (settings.isEmpty()) {
            return null;
        } else {
            return settings.get(0);
        }
    }

}
