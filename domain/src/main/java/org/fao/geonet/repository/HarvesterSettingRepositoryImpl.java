package org.fao.geonet.repository;

import static org.fao.geonet.repository.HarvesterSettingRepository.ID_PREFIX;
import static org.fao.geonet.repository.HarvesterSettingRepository.SEPARATOR;

import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.StringTokenizer;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.fao.geonet.domain.HarvesterSetting;
import org.fao.geonet.domain.Setting_;

/**
 * Implementation for all {@link HarvesterSetting} queries that cannot be automatically generated by Spring-data.
 *
 * @author Jesse
 */
public class HarvesterSettingRepositoryImpl implements HarvesterSettingRepositoryCustom {

    @PersistenceContext
    private EntityManager _entityManager;

    @Override
    public List<HarvesterSetting> findByPath(String pathToSetting) {
        StringTokenizer stringTokenizer = new StringTokenizer(pathToSetting, SEPARATOR);
    
        int countTokens = stringTokenizer.countTokens();
        List<String> pathSegments = new ArrayList<String>(countTokens);
        while (stringTokenizer.hasMoreTokens()) {
            String child = stringTokenizer.nextToken();
    
            if (child.startsWith(ID_PREFIX)) {
                pathSegments.clear();
                pathSegments.add(child);
            } else {
                pathSegments.add(child);
            }
        }
    
        List<HarvesterSetting> currentSettings = null;
        String firstSegment = pathSegments.get(0);
        if (firstSegment.startsWith(ID_PREFIX)) {
            int id = Integer.parseInt(firstSegment.substring(ID_PREFIX.length()));
            HarvesterSetting setting = _entityManager.find(HarvesterSetting.class, id);
            if (setting == null) {
                currentSettings = Collections.emptyList();
                pathSegments=Collections.emptyList();
            } else {
                currentSettings = Collections.singletonList(setting);
                pathSegments = pathSegments.subList(1, pathSegments.size());
            }
        } else {
            currentSettings = findRoots();
        }

        for (String childName : pathSegments) {
            List<HarvesterSetting> oldSettings = currentSettings;
            currentSettings = new LinkedList<HarvesterSetting>();
            for (HarvesterSetting setting : oldSettings) {
                List<HarvesterSetting> children = findChildrenByName(setting.getId(), childName);
                currentSettings.addAll(children);
            }
        }
        return currentSettings;
    }

    @Override
    public HarvesterSetting findOneByPath(String pathToSetting) {
        List<HarvesterSetting> settings = findByPath(pathToSetting);
        if (settings.isEmpty()) {
            return null;
        } else {
            return settings.get(0);
        }
    }

    @Override
    public List<HarvesterSetting> findRoots() {
        CriteriaBuilder criteriaBuilder = _entityManager.getCriteriaBuilder();
        CriteriaQuery<HarvesterSetting> query = criteriaBuilder.createQuery(HarvesterSetting.class);
        
        Root<HarvesterSetting> root = query.from(HarvesterSetting.class);
        query.where(criteriaBuilder.isNull(root.get(Setting_.parent)));
        
        return _entityManager.createQuery(query).getResultList();
    }

    @Override
    public List<HarvesterSetting> findAllChildren(int parentid) {
        CriteriaBuilder criteriaBuilder = _entityManager.getCriteriaBuilder();
        CriteriaQuery<HarvesterSetting> query = criteriaBuilder.createQuery(HarvesterSetting.class);
        
        Root<HarvesterSetting> root = query.from(HarvesterSetting.class);
        query.where(criteriaBuilder.equal(root.get(Setting_.parent), parentid));
        
        return _entityManager.createQuery(query).getResultList();
    }

    @Override
    public List<HarvesterSetting> findChildrenByName(int parentid, String name) {
        CriteriaBuilder criteriaBuilder = _entityManager.getCriteriaBuilder();
        CriteriaQuery<HarvesterSetting> query = criteriaBuilder.createQuery(HarvesterSetting.class);
        
        Root<HarvesterSetting> root = query.from(HarvesterSetting.class);
        Predicate equalParentId = criteriaBuilder.equal(root.get(Setting_.parent), parentid);
        Predicate equalName = criteriaBuilder.equal(root.get(Setting_.name), name);
        query.where(criteriaBuilder.and(equalParentId, equalName));
        
        return _entityManager.createQuery(query).getResultList();
    }

}
