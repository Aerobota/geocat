package org.fao.geonet.repository.statistic;


import org.fao.geonet.domain.ISODate;
import org.fao.geonet.domain.statistic.LuceneQueryParamType;
import org.fao.geonet.domain.statistic.SearchRequestParam;
import org.fao.geonet.domain.statistic.SearchRequest;
import org.fao.geonet.repository.AbstractSpringDataTest;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

import static org.junit.Assert.assertEquals;

@Transactional
public class SearchRequestRepositoryTest extends AbstractSpringDataTest {

    @Autowired
    SearchRequestRepository _requestRepo;


    @Autowired
    SearchRequestParamRepository _paramRepo;

    AtomicInteger _inc = new AtomicInteger();

    @Test
    public void testFindOne() {
        SearchRequest searchRequest1 = newSearchRequest();
        searchRequest1.persistParams(_paramRepo);
        searchRequest1 = _requestRepo.save(searchRequest1);

        SearchRequest searchRequest2 = newSearchRequest();
        searchRequest2 = _requestRepo.save(searchRequest2);

        assertEquals(searchRequest2, _requestRepo.findOne(searchRequest2.getId()));
        assertEquals(searchRequest1, _requestRepo.findOne(searchRequest1.getId()));
    }


    private SearchRequest newSearchRequest() {
        int val = _inc.incrementAndGet();
        SearchRequest searchRequest = new SearchRequest();
        searchRequest.setSpatialFilter("spatialRequest" + val);
        searchRequest.setSortBy("sortby" + val);
        searchRequest.setSimple(val % 2 == 0);
        searchRequest.setService("service" + val);
        searchRequest.setAutogenerated(val % 2 == 1);
        searchRequest.setHits(val);
        searchRequest.setIpAddress("ip" + val);
        searchRequest.setLang("l" + val);
        searchRequest.setLuceneQuery("query" + val);
        searchRequest.setMetadataType("mdtype" + val);
        searchRequest.setRequestDate(new ISODate());
        searchRequest.getParams().add(newRequestParam());
        searchRequest.getParams().add(newRequestParam());

        return searchRequest;
    }

    private SearchRequestParam newRequestParam() {
        int val = _inc.incrementAndGet();
        SearchRequestParam param = new SearchRequestParam();
        param.setInclusive(val % 2 == 0);
        param.setLowerText("lower text" + val);
        final LuceneQueryParamType[] values = LuceneQueryParamType.values();
        param.setQueryType(values[val % values.length]);
        param.setSimilarity(val);
        param.setTermField("term field" + val);
        param.setTermText("term text" + val);
        param.setUpperText("upper text" + val);

        return param;
    }

}
