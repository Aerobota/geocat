<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE urlrewrite PUBLIC "-//tuckey.org//DTD UrlRewrite 3.2//EN" "http://tuckey.org/res/dtds/urlrewrite3.2.dtd">
<!--
    Configuration file for UrlRewriteFilter http://tuckey.org/urlrewrite/
    
    Used to maintain backwards compatibility for old GeoNetwork URLs that use a 2-letter language code.
    
    Permanent redirects are used (HTTP status 301). This signals that the redirect is permanent and people might update their bookmarks, and this changes 
    the URL in the browser's address bar to the target URL.
    
    To return HTTP 200 and keep the old URL as is in the browser, change the rules below like this:
    
    <rule>
    <from>^(.*)/es/(.*)$</from>
    <to last="true">$1/spa/$2</to>
    </rule>
    
-->
<urlrewrite use-query-string="true" use-context="false">
    <rule>
        <note>
            Geocat hack.  seems that there is bug in creating the country xlinks to region.getmap requests.
        </note>
        <from>^/srv/(...)/region.getmap.png\?(.*?)id=countries:(\d+?)(.+)$</from>
        <to type="forward" last="true">/srv/$1/region.getmap.png\?$2id=country:$3$4</to>
    </rule>

    <!-- Rule to redirect old deprecated @json requests -->
    <rule>
        <from>^(.*)/fra/(.*)$</from>
        <to type="permanent-redirect" last="true">%{context-path}$1/fre/$2</to>
    </rule>
    <rule>
        <from>^(.*)/deu/(.*)$</from>
        <to type="permanent-redirect" last="true">%{context-path}$1/ger/$2</to>
    </rule>
    
    <rule>
        <condition name="content-type" operator="notequal">multipart/form-data</condition>
        <from>^(.+)@json$</from>
        <to type="permanent-redirect">%{context-path}$1?_content_type=json</to>
    </rule>
    <rule>
        <condition name="content-type" operator="notequal">multipart/form-data</condition>
        <from>^(.+)@json(\?.*)$</from>
        <to type="permanent-redirect">%{context-path}$1$2&amp;_content_type=json</to>
    </rule>
    <rule>
        <from>^(.*)/ar/(.*)$</from>
        <to type="permanent-redirect" last="true">%{context-path}$1/ara/$2</to>
    </rule>
    <rule>
        <from>^(.*)/ca/(.*)$</from>
        <to type="permanent-redirect" last="true">%{context-path}$1/cat/$2</to>
    </rule>
    <rule>
        <from>^(.*)/cn/(.*)$</from>
        <to type="permanent-redirect" last="true">%{context-path}$1/chi/$2</to>
    </rule>
    <rule>
        <from>^(.*)/nl/(.*)$</from>
        <to type="permanent-redirect" last="true">%{context-path}$1/dut/$2</to>
    </rule>
    <rule>
        <from>^(.*)/fi/(.*)$</from>
        <to type="permanent-redirect" last="true">%{context-path}$1/fin/$2</to>
    </rule>
    <rule>
        <from>^(.*)/fr/(.*)$</from>
        <to type="permanent-redirect" last="true">%{context-path}$1/fre/$2</to>
    </rule>
    <rule>
        <from>^(.*)/de/(.*)$</from>
        <to type="permanent-redirect" last="true">%{context-path}$1/ger/$2</to>
    </rule>
    <rule>
        <from>^(.*)/no/(.*)$</from>
        <to type="permanent-redirect" last="true">%{context-path}$1/nor/$2</to>
    </rule>
    <rule>
        <from>^(.*)/pt/(.*)$</from>
        <to type="permanent-redirect" last="true">%{context-path}$1/por/$2</to>
    </rule>
    <rule>
        <from>^(.*)/ru/(.*)$</from>
        <to type="permanent-redirect" last="true">%{context-path}$1/rus/$2</to>
    </rule>
    <rule>
        <from>^(.*)/es/(.*)$</from>
        <to type="permanent-redirect" last="true">%{context-path}$1/spa/$2</to>
    </rule>
    <rule>
        <from>^(.*)/en/(.*)$</from>
        <to type="permanent-redirect" last="true">%{context-path}$1/eng/$2</to>
    </rule>
    <rule>
        <from>^(.*)/tr/(.*)$</from>
        <to type="permanent-redirect" last="true">%{context-path}$1/tur/$2</to>
    </rule>
    <rule>
        <from>^(.*)/it/(.*)$</from>
        <to type="permanent-redirect" last="true">%{context-path}$1/ita/$2</to>
    </rule>
    <rule>
        <note>
            Retrieves robots.txt filemap pointing to sitemaps for better indexing.
        </note>
        <from>^/robots.txt$</from>
        <to type="forward" last="true">/srv/eng/robots.txt</to>
    </rule>

    <!-- Use new home service because it performs a faster redirect -->
    <rule>
        <from>^/([^/]*)/(\w\w\w)/home$</from>
        <to type="permanent-redirect" last="true">%{context-path}/home?hl=$2&amp;node=$1</to>
    </rule>

    <!-- Use redirects to handle the initial entry points -->
    <rule>
        <from>^/$</from>
        <to type="permanent-redirect" last="true">%{context-path}/home</to>
    </rule>
    <rule>
      <from>^/\?(.*)$</from>
      <to type="permanent-redirect" last="true">%{context-path}/home?$1</to>
    </rule>
    <rule>
        <from>^/index.html$</from>
        <to type="permanent-redirect" last="true">%{context-path}/home</to>
    </rule>
    <rule>
        <from>^/index.jsp$</from>
        <to type="permanent-redirect" last="true">%{context-path}/home</to>
    </rule>
    <rule>
      <from>^/(?!home$)(?!monitor$)(?!\w*healthcheck$)([a-zA-Z0-9_\-]+)$</from>
      <to type="permanent-redirect" last="true">%{context-path}/home?node=$1</to>
    </rule>


  <rule>
    <note>
      map old main service to home search service
      geonetwork/srv/ger/geocat
    </note>
    <from>^(.*)/([A-Za-z]{3})/geocat</from>
    <to type="permanent-redirect" last="true">%{context-path}$1/$2/catalog.search</to>
  </rule>
  <rule>
    <note>
      map old metadata.show requests to new formatter based viewer
    </note>
    <from>^(.*)/(.*)/metadata.show\?.*fileIdentifier=([^&amp;]+).*</from>
    <to type="permanent-redirect" last="true">%{context-path}$1/$2/md.viewer#/full_view/$3</to>
  </rule>
  <rule>
    <note>
      map old metadata.show requests to new formatter based viewer
    </note>
    <from>^(.*)/(.*)/metadata.show\?.*id=([^&amp;]+).*</from>
    <to type="permanent-redirect" last="true">%{context-path}$1/$2/md.viewer#/full_view/$3</to>
  </rule>
  <rule>
    <note>
      map old metadata.show requests to new formatter based viewer
    </note>
    <from>^(.*)/(.*)/metadata.show\?.*uuid=([^&amp;]+).*</from>
    <to type="permanent-redirect" last="true">%{context-path}$1/$2/md.viewer#/full_view/$3</to>
  </rule>
  <rule>
    <note>
      map old metadata.formatter.html requests to new formatter based viewer
    </note>
    <from>^(.*)/(.*)/metadata.formatter.html\?xsl=([^&amp;]+).*uuid=([^&amp;]+).*</from>
    <to type="permanent-redirect" last="true">%{context-path}$1/$2/md.format.html?xsl=$3&amp;id=$4</to>
  </rule>

  <!-- Rules for RESTful urls for metadata retrieve -->
    <rule>
        <note>
            Retrieves mef format for a metadata.
            Example URL: http://localhost:8080/geonetwork/metadata/eng/da165110-88fd-11da-a88f-000d939bc5d8.zip
        </note>
        <from>^/metadata/(.*)/(.*).zip$</from>
        <to type="forward">/srv/$1/mef.export?uuid=$2</to>
    </rule>

    <rule>
        <note>
            Retrieves xml format for a metadata.
            Example URL: http://localhost:8080/geonetwork/metadata/eng/da165110-88fd-11da-a88f-000d939bc5d8.xml
        </note>
        <from>^/metadata/(.*)/(.*).xml$</from>
        <to type="forward">/srv/$1/xml.metadata.get?uuid=$2</to>
    </rule>
    
    <rule>
        <note>
            Retrieves RDF format for a metadata.
            Example URL: http://localhost:8080/geonetwork/metadata/eng/da165110-88fd-11da-a88f-000d939bc5d8.rdf
        </note>
        <from>^/metadata/(.*)/(.*).rdf$</from>
        <to type="forward">/srv/$1/rdf.metadata.get?uuid=$2</to>
    </rule>
    
    <rule>
        <note>
            Retrieves pdf format for a metadata.
            Example URL: http://localhost:8080/geonetwork/metadata/eng/da165110-88fd-11da-a88f-000d939bc5d8.pdf
        </note>
        <from>^/metadata/(.*)/(.*).pdf$</from>
        <to type="forward">/srv/$1/pdf?uuid=$2</to>
    </rule>

    <rule>
        <note>
        Retrieves html format for a metadata (one node mode only).
        Example URL: http://localhost:8080/geonetwork/metadata/da165110-88fd-11da-a88f-000d939bc5d8
      </note>
      <from>^/metadata/(.*)$</from>
      <to type="permanent-redirect">%{context-path}/?uuid=$1</to>
    </rule>
    <rule>
      <note>
        Redirects to hash with metadata
        Example URL: http://localhost:8080/geonetwork?uuid=da165110-88fd-11da-a88f-000d939bc5d8
      </note>
      <from>^/(.*)/catalog.search\?.*uuid=(.*)</from>
      <to type="permanent-redirect">%{context-path}/#/metadata/$2</to>
    </rule>
    <rule>
      <note>
        Retrieves html format for a metadata (multinode mode).
        Example URL: http://localhost:8080/geonetwork/{{nodeid}}/metadata/da165110-88fd-11da-a88f-000d939bc5d8
        redirect to
        http://localhost:8080/geonetwork/?node={{nodeid}}&amp;uuid=ca5e22d6-5bd3-4b6a-bcfb-11462f76cd10
      </note>
      <from>^/([a-zA-Z0-9_\-]+)/metadata/(.*)$</from>
      <to type="permanent-redirect">%{context-path}/?node=$1&amp;uuid=$2</to>
    </rule>

    <rule>
        <note>
            map the old xml.user.login to the new login url
        </note>
        <from>^.*/.*/xml.user.login(\?.*)</from>
        <to type="permanent-redirect" last="true">%{context-path}/j_spring_security_check$1</to>
    </rule>
    
    <!-- Rule for rss.latest to rss.search?sortBt=changeDate -->
    <rule>
        <note>
            map the old rss.latest service
        </note>
        <from>^(.*)/rss.latest(\.*)</from>
        <to type="permanent-redirect" last="true">%{context-path}$1/rss.search?sortBy=changeDate</to>
    </rule>

    
    <rule>
        <note>
          INSPIRE Atom OpenSearchDescription
        </note>
        <from>^/opensearch/(.*)/(.*)/OpenSearchDescription.xml$</from>
        <to type="forward">/srv/$1/atom.description?fileIdentifier=$2</to>
    </rule>

    <rule>
        <note>
          INSPIRE Atom search
        </note>
        <from>^/opensearch/(.*)/(.*)/search?(.*)$</from>
        <to type="forward">/srv/$1/atom.search?fileIdentifier=$2</to>
    </rule>

    <rule>
        <note>
          INSPIRE Atom search
        </note>
        <from>^/opensearch/(.*)/search?(.*)$</from>
        <to type="forward">/srv/$1/atom.search</to>
    </rule>

    <rule>
        <note>
          INSPIRE Atom Describe (service)
        </note>
        <from>^/opensearch/(.*)/(.*)/describe?(.*)$</from>
        <to type="forward">/srv/$1/atom.describe?fileIdentifier=$2</to>
    </rule>

    <rule>
        <note>
          INSPIRE Atom DescribeBy
        </note>
        <from>^/opensearch/(.*)/describe?(.*)$</from>
        <to type="forward">/srv/$1/atom.describe</to>
    </rule>


    <rule>
        <note>
          INSPIRE Atom GetData
        </note>
        <from>^/opensearch/(.*)/download?(.*)$</from>
        <to type="forward">/srv/$1/atom.download</to>
    </rule>
    
    <!-- hide jsession id from google bot -->
    <outbound-rule encodefirst="true">
        <condition name="user-agent">googlebot.*</condition>
        <from>^(.*);jsessionid=.*(\?.*)$</from>
        <to>$1$2</to>
    </outbound-rule>
    
</urlrewrite>
